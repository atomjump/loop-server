#This is a combined tcp and http mode.  The http request is only to initialise, and get the ip address of the end
#user into a session variable in the database, and any cookies.  This comes in on the special port 1444 (it is only
#called from our software via an https request in chat.js)
#All the rest of the requests pass through the tcp mode to the server directly. This way, we keep the messages private
#on both the server and in between the servers

global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon
	
	

	# Default SSL material locations
	ca-base /etc/ssl/private/
	crt-base /etc/ssl/private/

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL).
	ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
	log	global
	mode	http
	option	httplog
	

	option	dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http



    
frontend http-in
    bind *:80
	mode http
	
	http-request set-header X-Forwarded-Proto https if { ssl_fc }   

	reqadd X-Forwarded-Proto:\ http
	
	#acl init path_beg /search-secure
    #use_backend application-ssl-init if init
	
	
  	#Testing:
  	#use_backend application-staging-http if { hdr(Host) -i staging.atomjump.com }
	
	
    default_backend application-http
    #OLDredirect scheme https if { hdr(Host) -i www.atomjump.com } !{ ssl_fc } 
    redirect location https://atomjump.com if { hdr(Host) -i www.atomjump.com } !{ ssl_fc } 
  
  
      
     
    redirect scheme https if { hdr(Host) -i staging.atomjump.com } !{ ssl_fc }
    redirect scheme https if { hdr(Host) -i atomjump.com } !{ ssl_fc }
  
 
 
  
  
frontend https-in-init
    bind *:1444 ssl crt /etc/ssl/private/atomjump.private.pem no-sslv3
	mode http    
	reqadd X-Forwarded-Proto:\ https
 

    #Allow staging to go to different backend
    tcp-request inspect-delay 5s
  	tcp-request content accept               if { req_ssl_hello_type 1 }
    use_backend application-staging-ssl-init if { ssl_fc_sni -i staging.atomjump.com }
    
  
    default_backend application-ssl-init  
  

frontend https-in
    bind *:443 
	option tcplog
	mode tcp    


    #Allow for staging to go to different backend
    tcp-request inspect-delay 5s
  	tcp-request content accept               if { req_ssl_hello_type 1 }
    use_backend application-staging-ssl if { req_ssl_sni -i staging.atomjump.com }

	#Testing
	acl sslv3 req.ssl_ver 3
	tcp-request content reject if sslv3

    default_backend application-ssl
    






backend application-ssl
    mode tcp
    balance leastconn
	option ssl-hello-chk    

    #enter the IP of your application here
    #tempout   server node3 128.199.221.111:1443 check
    #server node2 178.62.54.86:1443 check
	#server node1 107.170.234.71:1443 check    
	server node5 104.131.151.99:1443 check

backend application-http
	
    
	balance leastconn
    option httpclose
    option forwardfor
    mode http 
	cookie JSESSIONID prefix

    #enter the IP of your application here
    #tempout  server node3 128.199.221.111:1080 cookie A check
    #server node2 178.62.54.86:1080 cookie A check
    #server node1 107.170.234.71:1080 cookie A check	
	server node5 104.131.151.99:1080 cookie A check

backend application-ssl-init
	
    #redirect scheme https
    # if !{ ssl_fc }
	balance leastconn
    option httpclose
    option forwardfor
    mode http 
	cookie JSESSIONID prefix

    #enter the IP of your application here
   #tempout server node3 128.199.221.111:1080 cookie A check
   #server node2 178.62.54.86:1080 cookie A check
   #server node1 107.170.234.71:1080 cookie A check
	server node5 104.131.151.99:1080 cookie A check
    




#Testing Staging:

backend application-staging-ssl
    mode tcp
    balance leastconn
	option ssl-hello-chk   
	#option  httpchk	GET /check-status.php
	option mysql-check user haprox

    #enter the IP of your application here
    #tempout   server node3 128.199.221.111:1443 check
    #server node2 178.62.54.86:1443 check
    #server node4 178.62.58.144:1443 check
    
    server node2 178.62.54.86:1443 check port 3306
    server node4 178.62.58.144:1443 check port 3306
    
	#server node1 107.170.234.71:1443 check    
	#server node5 104.131.151.99:1443 check

backend application-staging-http
	
    
	balance leastconn
    option httpclose
    option forwardfor
    option  httpchk	GET /check-status.php HTTP/1.1\r\nHost:\ atomjump.com
    
    #option mysql-check user haprox
    mode http 
	cookie JSESSIONID prefix

    #enter the IP of your application here
    #tempout  server node3 128.199.221.111:1080 cookie A check
    server node2 178.62.54.86:1080 cookie A check
    server node4 178.62.58.144:1080 cookie A check
    #server node1 107.170.234.71:1080 cookie A check	
	#server node5 104.131.151.99:1080 cookie A check

backend application-staging-ssl-init
	
    #redirect scheme https
    # if !{ ssl_fc }
	balance leastconn
    option httpclose
    option  httpchk	GET /check-status.php HTTP/1.1\r\nHost:\ atomjump.com
    
    option forwardfor
    mode http 
	cookie JSESSIONID prefix

    #enter the IP of your application here
    #tempout server node3 128.199.221.111:1080 cookie A check
    server node2 178.62.54.86:1080 cookie A check
    server node4 178.62.58.144:1080 cookie A check
    
    #server node1 107.170.234.71:1080 cookie A check
	#server node5 104.131.151.99:1080 cookie A check




